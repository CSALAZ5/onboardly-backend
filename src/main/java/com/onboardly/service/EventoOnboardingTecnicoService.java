package com.onboardly.service;

import com.onboardly.dto.EventoOnboardingTecnicoRequestDTO;
import com.onboardly.dto.EventoOnboardingTecnicoResponseDTO;
import com.onboardly.model.EventoOnboardingTecnico;
import com.onboardly.exception.ResourceNotFoundException;
import com.onboardly.repository.EventoOnboardingTecnicoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;
import java.util.Optional;

@Service
public class EventoOnboardingTecnicoService {

    private final EventoOnboardingTecnicoRepository eventoOnboardingTecnicoRepository;

    @Autowired
    public EventoOnboardingTecnicoService(EventoOnboardingTecnicoRepository eventoOnboardingTecnicoRepository) {
        this.eventoOnboardingTecnicoRepository = eventoOnboardingTecnicoRepository;
    }

    public List<EventoOnboardingTecnicoResponseDTO> getAllEventos() {
        return eventoOnboardingTecnicoRepository.findAll().stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    public EventoOnboardingTecnicoResponseDTO getEventoById(Long id) {
        EventoOnboardingTecnico evento = eventoOnboardingTecnicoRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("EventoOnboardingTecnico not found with id: " + id));
        return convertToDto(evento);
    }

    public EventoOnboardingTecnicoResponseDTO createEvento(EventoOnboardingTecnicoRequestDTO eventoRequestDTO) {
        EventoOnboardingTecnico evento = convertToEntity(eventoRequestDTO);
        return convertToDto(eventoOnboardingTecnicoRepository.save(evento));
    }

    public EventoOnboardingTecnicoResponseDTO updateEvento(Long id,
            EventoOnboardingTecnicoRequestDTO eventoDetailsDTO) {
        Optional<EventoOnboardingTecnico> optionalEvento = eventoOnboardingTecnicoRepository.findById(id);
        if (optionalEvento.isPresent()) {
            EventoOnboardingTecnico evento = optionalEvento.get();
            evento.setNombre(eventoDetailsDTO.getNombre());
            evento.setFechaInicio(eventoDetailsDTO.getFechaInicio());
            evento.setFechaFin(eventoDetailsDTO.getFechaFin());
            return convertToDto(eventoOnboardingTecnicoRepository.save(evento));
        } else {
            throw new ResourceNotFoundException("EventoOnboardingTecnico not found with id: " + id);
        }
    }

    public List<EventoOnboardingTecnicoResponseDTO> getUpcomingEventos() {
        LocalDate today = LocalDate.now();
        LocalDate sevenDaysLater = today.plusDays(7);
        return eventoOnboardingTecnicoRepository.findByFechaInicioBetween(today, sevenDaysLater).stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    public void deleteEvento(Long id) {
        if (!eventoOnboardingTecnicoRepository.existsById(id)) {
            throw new ResourceNotFoundException("EventoOnboardingTecnico not found with id: " + id);
        }
        eventoOnboardingTecnicoRepository.deleteById(id);
    }

    private EventoOnboardingTecnicoResponseDTO convertToDto(EventoOnboardingTecnico evento) {
        EventoOnboardingTecnicoResponseDTO dto = new EventoOnboardingTecnicoResponseDTO();
        dto.setId(evento.getId());
        dto.setNombre(evento.getNombre());
        dto.setFechaInicio(evento.getFechaInicio());
        dto.setFechaFin(evento.getFechaFin());
        return dto;
    }

    private EventoOnboardingTecnico convertToEntity(EventoOnboardingTecnicoRequestDTO dto) {
        EventoOnboardingTecnico evento = new EventoOnboardingTecnico();
        evento.setNombre(dto.getNombre());
        evento.setFechaInicio(dto.getFechaInicio());
        evento.setFechaFin(dto.getFechaFin());
        // ID is generated by the database for new entities
        return evento;
    }
}
    

    